"cmedit" (* slogan = "Read, manipulate, and export Configuration Management data" *) WS "export" (* slogan = "Initiate an export of node data from the network through the CLI" *) ( EXPORT_RUN_EXPORT | EXPORT_GET_JOB_STATUS | EXPORT_DOWNLOAD_EXPORT | EXPORT_LIST_FILTERS | EXPORT_REMOVE_JOB )

EXPORT_RUN_EXPORT ::=  EXPORT_TARGET EXPORT_FILE_TYPE { EXPORT_RUN_OPTIONS } (* unique = "true" *)
EXPORT_RUN_OPTIONS ::= ( EXPORT_FILTER_NAME_OR_FILE | EXPORT_JOB_NAME | EXPORT_FILE_COMPRESSION | EXPORT_ENUM_TRANSLATE | EXPORT_SYNC_STATE | EXPORT_DATA_CATEGORIES | EXPORT_PRETTY_FORMAT )
EXPORT_TARGET ::= ( EXPORT_NODE_TARGET { EXPORT_TARGET_EXCEPT_NODE } (* unique = "true" *) | EXPORT_NETYPE_TARGET { EXPORT_TARGET_EXCEPT_NETYPE } (* unique = "true" *) | EXPORT_COLLECTION_TARGET { EXPORT_TARGET_EXCEPT_COLLECTION } (* unique = "true" *) | EXPORT_SAVEDSEARCH_TARGET { EXPORT_TARGET_EXCEPT_SAVEDSEARCH } (* unique = "true" *) )
EXPORT_TARGET_EXCEPT_NODE ::= ( EXPORT_NETYPE_TARGET | EXPORT_COLLECTION_TARGET | EXPORT_SAVEDSEARCH_TARGET )
EXPORT_TARGET_EXCEPT_NETYPE ::= ( EXPORT_NODE_TARGET | EXPORT_COLLECTION_TARGET | EXPORT_SAVEDSEARCH_TARGET )
EXPORT_TARGET_EXCEPT_COLLECTION ::= ( EXPORT_NODE_TARGET | EXPORT_NETYPE_TARGET | EXPORT_SAVEDSEARCH_TARGET )
EXPORT_TARGET_EXCEPT_SAVEDSEARCH ::= ( EXPORT_NODE_TARGET | EXPORT_NETYPE_TARGET | EXPORT_COLLECTION_TARGET )
EXPORT_GET_JOB_STATUS ::= EXPORT_STATUS [ EXPORT_JOB [ EXPORT_DETAIL ] ]
EXPORT_DOWNLOAD_EXPORT ::= EXPORT_DOWNLOAD EXPORT_JOB
EXPORT_REMOVE_JOB ::= EXPORT_REMOVE EXPORT_JOB
EXPORT_JOB ::= ( EXPORT_JOB_ID | EXPORT_JOB_NAME )

EXPORT_NODE_TARGET ::= WS ( "-n" (* hide = "true" *) | "--ne" (* slogan = "Option to specify the Network Element to execute command on, e.g. 'ERBS123'. TIP : -n is the shorthand option for --ne" *)  ) WS ( EXPORT_NODE_SCOPE { ";" EXPORT_NODE_SCOPE } | "*" (* slogan = "Network wide scope" *) )
EXPORT_NETYPE_TARGET ::= WS ( "-nt" (* hide = "true" *) | "--netype" (* slogan = "Option to specify the NeType to execute command on, e.g. 'ERBS'. TIP : -nt is the shorthand option for --netype" *) ) WS <netype_name> (* slogan = "Enter the name of the desired NeType" *) { ";" (* slogan = "Semi-colon used to add to the list" *) <netype_name> (* slogan = "Enter the name of the desired NeType" *) }
EXPORT_COLLECTION_TARGET ::= WS ( "-co" (* hide = "true" *) | "--collection" (* slogan = "Option to execute the command on a predefined collection. TIP : -co is the shorthand option for --collection" *) ) WS <collection_name> (* slogan = "Enter the name of the desired collection" *) { ";" (* slogan = "Semi-colon used to add to the list" *) <collection_name> (* slogan = "Enter the name of the desired collection" *) }
EXPORT_SAVEDSEARCH_TARGET ::= WS ( "-sa" (* hide = "true" *) | "--savedsearch" (* slogan = "Option to execute the command on a predefined savedsearch. TIP : -sa is the shorthand option for --savedsearch" *) ) WS <savedsearch_name> (* slogan = "Enter the name of the desired savedsearch" *) { ";" (* slogan = "Semi-colon used to add to the list" *) <savedsearch_name> (* slogan = "Enter the name of the desired savedsearch" *) }
EXPORT_LIST_FILTERS ::= WS ( "-lf" (* hide = "true" *) | "--listfilters" (* slogan = "Option to list the available filters. TIP : -lf is the shorthand option for --listfilters" *) )
EXPORT_NODE_SCOPE ::= ( PREDEF_FDN_LAZY | EXPORT_NODE_NAME )
EXPORT_NODE_NAME ::= ( <node_name> | EXPORT_PARTIAL_NODE_NAME )
EXPORT_PARTIAL_NODE_NAME ::= [ "*" (* hide = "true" *) ] , <node_name> (* hide = "true" *) , [ "*" (* hide = "true" *) ]
EXPORT_FILE_TYPE ::= WS ( "-ft" (* hide = "true" *) | "--filetype" (* slogan = "Option to specify the file type. TIP : -ft is the shorthand option for --filetype" *) ) WS ( "3GPP" (* slogan = "Bulk Configuration 3GPP file format" *) | "dynamic" (* slogan = "Ericsson Dynamic file format" *) )
EXPORT_FILTER_NAME_OR_FILE ::= ( EXPORT_FILTER_NAME | EXPORT_FILTER_FILE ) [ EXPORT_BATCH_FILTER ]
EXPORT_FILTER_NAME ::= WS ( "-fn" (* hide = "true" *) | "--filtername" (* slogan = "Option to allow a predefined filter to be used for the export. TIP : -fn is the shorthand option for --filtername" *) ) WS <filter_name> (* slogan = "This filter is specified by its namespace, name and version" *)
EXPORT_FILTER_FILE ::= WS "-f" (* slogan = "Option to allow a user-defined filter file to be used for the export" *) WS "file:" <filter_file_name> (* inputType = "fileNameNoQuotes" slogan = "Specify a file name" *)
EXPORT_STATUS ::= WS ( "-st" (* hide = "true" *) | "--status" (* slogan = "Option to return the status. TIP : -st is the shorthand option for --status" *) )
EXPORT_JOB_ID ::= WS ( "-j" (* hide = "true" *) | "--job" (* slogan = "Option to specify job ID number to execute the command on. TIP : -j is the shorthand option for --job" *) ) WS <job_ID> (* slogan = "Enter job identification number" *)
EXPORT_JOB_NAME ::= WS ( "-jn" (* hide = "true" *) | "--jobname" (* slogan = "Option to specify job name to execute the command on.  TIP : -jn is the shorthand option for --jobname" *) ) WS  <job_name> (* slogan = "Please enter the job name" *)
EXPORT_DETAIL ::= WS ( "-v" (* hide = "true" *) | "--verbose" (* slogan = "Option to produce verbose output from command.  TIP : -v is the shorthand option for --verbose" *) )
EXPORT_DOWNLOAD ::= WS ( "-dl" (* hide = "true" *) | "--download" (* slogan = "Option to download. TIP : -dl is the shorthand option for --download" *) )
EXPORT_REMOVE ::= WS ( "-rm" (* hide = "true" *) | "--remove" (* slogan = "Option to remove an export job from the system,. TIP : -rm is the shorthand option for --remove" *) )
EXPORT_FILE_COMPRESSION ::= WS ( "-fc" (* hide = "true" *) | "--filecompression" (* slogan = "Option to specify the file compression type to be used to generate the export file. TIP : -fc is the shorthand option for --filecompression" *) ) WS ( "zip" (* slogan = "Produce a file using zip compression" *) | "gzip" (* slogan = "Produce a file using gzip compression" *) | "none" (* slogan = "No file compression" *) )
EXPORT_ENUM_TRANSLATE ::= WS ( "-et" (* hide = "true" *) | "--enumtranslate" (* slogan = "Option to specify how enum attribute values are translated in the export file. TIP : -et is the shorthand option for --enumtranslate" *) ) WS ( "true" (* slogan = "Enum attribute values are translated as String literals" *) | "false" (* slogan = "Enum attribute values are translated as integers" *) )
EXPORT_SYNC_STATE ::= WS ( "-ss" (* hide = "true" *) | "--syncstate" (* slogan = "Option to specify CM synchronization state for nodes to be included in the export file. TIP : -ss is the shorthand option for --syncstate" *) ) WS ( "sync" (* slogan = "Only synchronized nodes will be exported" *) | "all" (* slogan = "Nodes with any synchronization state will be exported" *) )
EXPORT_DATA_CATEGORIES ::= WS ( "-dc" (* hide = "true" *) | "--datacategories" (* slogan = "Option to specify list of data models to be exported in the export file for any file type. TIP : -dc is the shorthand option for --datacategories" *) ) WS ( EXPORT_DATA_CATEGORIES_LIST { ";" (* slogan = "Semi-colon used to add to the list" *) EXPORT_DATA_CATEGORIES_LIST } | EXPORT_DATA_CATEGORIES_ALL )
EXPORT_DATA_CATEGORIES_LIST ::= ( "NETWORK_RESOURCE_DATA" (* slogan = "Export file will include SubNetwork, MeContext, ManagedElement, and their sub-tree data." *) | "ENM_DATA" (* slogan = "Export file will include NetworkElement and its sub-tree data." *) | "TCIM_DATA" (* slogan = "Export file will include Network and its sub-tree data." *) )
EXPORT_DATA_CATEGORIES_ALL ::= "ALL" (* slogan = "Export file will include data from all models. Note that ALL cannot be specified in a list of datacategories." *)
EXPORT_PRETTY_FORMAT ::= WS ( "-pf" (* hide = "true" *) | "--prettyformat" (* slogan = "Option to enable or disable formatting of data in export file. TIP : -pf is the shorthand option for --prettyformat" *) ) WS ( "true" (* slogan = "The export file is formatted" *) | "false" (* slogan = "The export file is not formatted" *) )
EXPORT_BATCH_FILTER ::= WS ( "-bf" (* hide = "true" *) | "--batchfilter" (* slogan = "Option to enable or disable batching for filtered export. TIP : -bf is the shorthand option for --batchfilter" *) ) WS ( "true" (* slogan = "The filtered export is processed with batching" *) | "false" (* slogan = "The filtered export is processed without batching" *) )

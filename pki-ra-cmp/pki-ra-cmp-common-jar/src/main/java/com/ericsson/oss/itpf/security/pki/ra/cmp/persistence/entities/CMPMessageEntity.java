/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2015
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.oss.itpf.security.pki.ra.cmp.persistence.entities;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.*;

import com.ericsson.oss.itpf.security.pki.ra.cmp.persistence.MessageStatus;

/**
 * This is an entity class which reflects actual CMP message table.<br>
 * 
 * Table Columns:<br>
 * 1. TransactionID - It is a base64Encoded transactionID which is stored.<br>
 * 
 * 2. SenderName- It is entity subjectDN.<br>
 * 
 * 3. InitialMessage - this is byte[] of the request message received from entity. Only IR and KUR are stored as initialMessages.<br>
 * 
 * 4. ResponseMessage -This is actual signedResponse which is formed. All responseTypes like IP withWait/IP/KUP/PKIConf are stored against this cloumn.<br>
 * 
 * 5. Status- It is updated as when CMP service is wait_for_ack, in case of KUR/IR it would be new, in case IP is stored in DB status would be wait_for_Ack. All status types can be seen in
 * CMPMessageStatus->enum<br>
 * 
 * 6.createTime/modifyTime- This time is needed for DB maintenence.<br>
 * 
 * 7.SerialNumber: AutogeneratedID<br>
 * 8. SenderNonce: Nonce send by node for RequestMessage and send by RA while sending response<br>
 * 9. RequestType: Row is of which requestType only IR and KUR will be saved<br>
 * 
 * @author tcsdemi
 *
 */
@Entity
@Table(name = "cmpmessages")
@NamedQueries({
        @NamedQuery(name = "CMPMessageEntity.findBySenderNameAndTransactionId", query = "SELECT c FROM CMPMessageEntity c WHERE c.senderName =:senderName AND c.transactionID =:transactionID"),
        @NamedQuery(name = "CMPMessageEntity.findByTransactionId", query = "SELECT c FROM CMPMessageEntity c WHERE c.transactionID =:transactionID"),
        @NamedQuery(name = "CMPMessageEntity.findByStatus", query = "SELECT c FROM CMPMessageEntity c WHERE c.status =:status"),
        @NamedQuery(name = "CMPMessageEntity.deleteByCreatedDate", query = "DELETE FROM CMPMessageEntity c WHERE c.createTime <:dateToCompare"),
        @NamedQuery(name = "CMPMessageEntity.updateStatusByCreatedDate", query = "UPDATE CMPMessageEntity SET status=:revokeStatus WHERE createTime <:dateToCompare AND status LIKE :waitStatus"),
        @NamedQuery(name = "CMPMessageEntity.findToBeRevokedEntitiesByOldModifiedDate", query = "SELECT c FROM CMPMessageEntity c WHERE c.status =:newRevokeStatus OR c.status =:oldRevokeStatus ORDER BY c.modifyTime"),
        @NamedQuery(name = "CMPMessageEntity.findByStatusAndRequestType", query = "SELECT c FROM CMPMessageEntity c WHERE c.status =:status AND c.requestType =:requestType") })
public class CMPMessageEntity implements Serializable {

    private static final long serialVersionUID = 716454044271545215L;

    @Id
    @SequenceGenerator(name = "SEQ_CMP_ID_GENERATOR", sequenceName = "SEQ_CMP_ID", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SEQ_CMP_ID_GENERATOR")
    @Column(name = "SERIAL_NO")
    private int serialNumber;

    @Column(name = "TRANSACTION_ID")
    private String transactionID;

    @Column(name = "SENDER_NAME")
    private String senderName;

    @Column(name = "SENDER_NONCE")
    private String senderNonce;

    @Column(name = "INITIAL_MESSAGE")
    private byte[] initialMessage;

    @Column(name = "RESPONSE_MESSAGE")
    private byte[] responseMessage;

    @Column(name = "STATUS")
    @Enumerated(EnumType.STRING)
    private MessageStatus status;

    @Column(name = "CREATE_TIME")
    private Date createTime;

    @Column(name = "MODIFY_TIME")
    private Date modifyTime;

    @Column(name = "REQUEST_TYPE")
    private String requestType;

    /**
     * Gets the requestType as String from ENUM. Must be used as eg: <code>CMPRequestType.INITIALIZATION_REQUEST.toString()</code>
     * 
     * @return
     */
    public String getRequestType() {
        return requestType;
    }

    /**
     * Sets the requestType as String from ENUM. Must be set as eg: <code>CMPRequestType.INITIALIZATION_REQUEST.toString()</code>
     * 
     * @return
     */
    public void setRequestType(final String requestType) {
        this.requestType = requestType;
    }

    /**
     * Gets the responseMessage as byte[]. This is usually the response which is built at PKI-Manager and stored in DB.
     * 
     * @return
     */
    public byte[] getResponseMessage() {
        return responseMessage;
    }

    /**
     * Sets the responseMessage in byte[]
     * 
     * @param responseMessage
     */
    public void setResponseMessage(final byte[] responseMessage) {
        this.responseMessage = responseMessage;
    }

    /**
     * Gets the status in ENUM string.
     * 
     * @return
     */
    public MessageStatus getStatus() {
        return status;
    }

    /**
     * Sets the status
     * 
     * @param status
     */
    public void setStatus(final MessageStatus status) {
        this.status = status;
    }

    /**
     * gets the createTime i.e when data was persisted for the firstTime.
     * 
     * @return
     */
    public Date getCreateTime() {
        return createTime;
    }

    /**
     * sets the systemtime when data has to be persisted for the first time.
     * 
     * @param createTime
     */
    public void setCreateTime(final Date createTime) {
        this.createTime = createTime;
    }

    /**
     * gets the modify time i,e whenever the row was updated, modify time is set.
     * 
     * @return
     */
    public Date getModifyTime() {
        return modifyTime;
    }

    /**
     * sets the modifyTime i.e whenever the row was updated, modify time is set.
     * 
     * @param modifyTime
     */
    public void setModifyTime(final Date modifyTime) {
        this.modifyTime = modifyTime;
    }

    /**
     * Gets the initialMessage from DB i.e in case of CertConf, requestMessage is not persisted, hence previous IR or KUR is present. Hence requestMessage is the initialMessage
     * 
     * @return
     */
    public byte[] getInitialMessage() {
        return initialMessage;
    }

    /**
     * Sets the initialMessage in DB, only IR and KUR messages are persisted.
     * 
     * @param message
     */
    public void setInitialMessage(final byte[] message) {
        this.initialMessage = message;
    }

    /**
     * gets the DEREncoded sender nonce
     * 
     * @return
     */
    public String getSenderNonce() {
        return senderNonce;
    }

    /**
     * sets the derEncoded senderNonce
     * 
     * @param senderNonce
     */
    public void setSenderNonce(final String senderNonce) {
        this.senderNonce = senderNonce;
    }

    /**
     * Gets the transactionId. It is Base64Encoded.
     * 
     * @return
     */
    public String getTransactionID() {
        return transactionID;
    }

    /**
     * Sets transactionId. It is Base64Encoded.
     * 
     * @param transactionID
     */
    public void setTransactionID(final String transactionID) {
        this.transactionID = transactionID;
    }

    /**
     * Gets the senderName.
     * 
     * @return
     */
    public String getSenderName() {
        return senderName;
    }

    /**
     * Sets the senderName. Sender Name which is passed as input is the Principal name from RequestMessage header.
     * 
     * @param senderName
     */
    public void setSenderName(final String senderName) {
        this.senderName = senderName;
    }

}
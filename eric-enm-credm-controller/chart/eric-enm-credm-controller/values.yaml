#eric-enm-credm-controller image version

# Local ENvironment (MINIKUBE) mode
localEnv:
  enabled: false

credmController:
  logdebugflag: false
  logfiledebugflag: false
  javamockflag: false
  debug: false
  cronSleepMinutes: 30
  listenerJob: false
  rsyslogflag: true
  rsyslogfile: 50-credm-log.conf
  spsappname: sps

global:
  pullSecret:
  registry:
    url: armdocker.rnd.ericsson.se
  replicas-eric-enm-credm-controller: 2
  persistentVolumeClaim:
    enabled: false
    storageClass:
  timezone:
  enmProperties:
    CREDM_REST_PORT: 5001
    postgresql01_admin_password:
    hqs_persistence_provider:
    hqs_persistence_provider_port:
  ingress:
    enmHost:
  vips:
    fm_vip_address:
    cm_vip_address:
    pm_vip_address:
    itservices_0_vip_address:
    itservices_1_vip_address:
    cm_vip_ipv6address:
    fm_vip_ipv6address:


labels: {}

ingress:
  enmHost:

productRevision: RSTATE
productNumber: CXC Placeholder
labels: {}

images:
  eric-enm-credm-controller:
    name: eric-enm-credm-controller
    tag: VERSION
    postStartCommand:
    preStopCommand:
  ericCredmControllerInitContainer:
    enabled: true
    name: eric-enm-credm-controller-init
    tag: VERSION
  enmInitContainer:
    enabled: false
    name: eric-init-controller
    tag: VERSION
  ericCredmControllerCronjob:
    enabled: true
    name: eric-enm-credm-controller-cron-job
    tag: VERSION
  ericCredmControllerPostinstalljob:
    enabled: true
    name: eric-enm-credm-controller-job
    tag: VERSION


imageCredentials:
  repoPath: proj-enm
  pullPolicy: Always
  pullSecret:
  registry:
    url:

## Allows the specification of additional environment variables
extraEnv:
  enabled: false

## Configure the service
service:
  name: eric-enm-credm-controller
  annotations: {}
  labels: {}
  emptyState: "empty"
  noneState: "none"
  emptyData: "bm9uZQo="

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: eric-enm-credm-controller-account

# Service Ports to Expose, read from appconfig/servicePorts.txt
servicePorts:
  enabled: false

# Add container ports to open, read in from appconfig/ports.txt(disabled by default as should be included in docker file)
extraPorts:
  enabled: false

## Configure resource requests and limits
resources:
  requests:
    enabled: true
    cpu: 600m
    memory: 512Mi
  limits:
    enabled: true
    cpu: 2000m
    memory: 1Gi
  initcontainer:
    requests:
      enabled: true
      cpu: 500m
      memory: 512Mi
    limits:
      enabled: true
      cpu: 1000m
      memory: 512Mi
  cronjob:
    requests:
      enabled: true
      cpu: 500m
      memory: 512Mi
    limits:
      enabled: true
      cpu: 1000m
      memory: 512Mi
  postinstall:
    requests:
      enabled: true
      cpu: 500m
      memory: 512Mi
    limits:
      enabled: true
      cpu: 1000m
      memory: 512Mi

# configure terminationGracePeriodSeconds
terminationGracePeriodSeconds: 10

# Add initContainer if required
extraInitContainers:

## Additional containers to be added to the pod(s).
sidecarContainers:
  enabled: false

monitoring:
  enabled: false

# Add in volumes(rwx etc), read from appconfig/volumes.txt
extraVolumes:
  enabled: false

# Add in volumeMounts(rwx etc), read from appconfig/volumeMounts.txt
extraVolumeMounts:
  enabled: false

# Custom config map, read from appconfig/configMaps.yaml
gpMaps:
  enabled: true
  name: gpcredmcontroller
  mountPath: "/gp"

# Custom config map, read from appconfig/configMaps.yaml
configMaps:
  enabled: false
  name: config-eric-enm-credm-controller
  mountPath: MOUNTPOINT

# Persist data to a persistent volume
persistentVolumeClaim:
  enabled: false
  storageClass:
  accessModes: ReadWriteOnce
  size: 3Gi
  mountPath: "/credmData"
  annotations: {}

# LivenessProbe Health Check configuration.
livenessProbe:
  enabled: true
  livenessCommand: "[ '/bin/sh', '-c', '/credm/scripts/liveness.sh' ]"
  initialDelaySeconds: 90
  periodSeconds: 60
  timeoutSeconds: 15
  failureThreshold: 2

readinessProbe:
  enabled: true
  readinessCommand: "[ '/bin/sh', '-c', '/credm/scripts/readiness.sh' ]"
  initialDelaySeconds: 30
  periodSeconds: 150
  timeoutSeconds: 120
  successThreshold: 1
  failureThreshold: 4


# Extra Annotations to be added to pod
podAnnotations: {}

## Tolerations for pod assignment
tolerations: []

## Affinity for pod assignment
affinity:
  podAntiAffinity: "hard"

# Constrain which nodes your pod is eligible to be scheduled on
nodeAffinity: {}

priorityClassName: ""

## Node selector
nodeSelector: {}

updateStrategy:
  rollingUpdate:
    maxSurge: 0
    maxUnavailable: 1
  type: RollingUpdate

## Pod Disruption Budget is an indicator of the number of disruptions that can be tolerated at a given time.
podDisruptionBudget:
  maxUnavailable: 1

## parameters for CronJob of credm controller
cronJobParameters:
  cronjobname: cron-job

## parameters for ms8ms9 job of credm controller
ms8ms9Parameters:
  cronjobname: ms8ms9-cronjob
  jobname: ms8ms9-job



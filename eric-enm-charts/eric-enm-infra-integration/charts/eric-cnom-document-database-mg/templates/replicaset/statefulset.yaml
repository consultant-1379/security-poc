{{- $global := fromJson (include "eric-cnom-document-database-mg.global" .) -}}
{{- if .Values.replicaSet.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "eric-cnom-document-database-mg.name" . }}
  labels:
    app.kubernetes.io/name: {{ template "eric-cnom-document-database-mg.name" . }}
    app.kubernetes.io/version: {{ template "eric-cnom-document-database-mg.version" . }}
    app.kubernetes.io/instance : {{ .Release.Name }}
    chart: {{ template "eric-cnom-document-database-mg.chart" . }}
    heritage: {{ .Release.Service }}
    {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- include "eric-cnom-document-database-mg.product-info" . | nindent 4 }}
    {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ template "eric-cnom-document-database-mg.name" . }}-headless
  replicas: {{ .Values.replicaSet.replicaCount }}
  updateStrategy:
    type: {{ .Values.replicaSet.updateStrategy.type }}
    {{- if eq "OnDelete" .Values.replicaSet.updateStrategy.type }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "eric-cnom-document-database-mg.name" . }}
      app.kubernetes.io/instance : {{ .Release.Name }}
      component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "eric-cnom-document-database-mg.name" . }}
        app.kubernetes.io/instance : {{ .Release.Name }}
        app.kubernetes.io/version: {{ template "eric-cnom-document-database-mg.version" . }}
        chart: {{ template "eric-cnom-document-database-mg.chart" . }}
        component: mongodb
        {{- if .Values.podLabels }}
        {{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName | default (include "eric-cnom-document-database-mg.name" .) | quote }}
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      securityContext:
        fsGroup: 1001
        {{- if semverCompare ">=1.20-0" .Capabilities.KubeVersion.GitVersion }}
        fsGroupChangePolicy: "OnRootMismatch"
        {{- end }}
      {{- if eq .Values.affinity.podAntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ template "eric-cnom-document-database-mg.name" . }}
                  app.kubernetes.io/instance : {{ .Release.Name }}
                  app.kubernetes.io/component: mongodb
              topologyKey: kubernetes.io/hostname
      {{- else if eq .Values.affinity.podAntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ template "eric-cnom-document-database-mg.name" . }}
                    app.kubernetes.io/instance : {{ .Release.Name }}
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 100
      {{- end }}
      {{- if (or .Values.nodeSelector $global.nodeSelector) }}
      nodeSelector: {{- include "eric-cnom-document-database-mg.nodeSelector" . | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if include "eric-cnom-document-database-mg.pullSecrets" . }}
      imagePullSecrets:
        - name: {{ template "eric-cnom-document-database-mg.pullSecrets" . }}
      {{- end }}
      containers:
        - name: {{ template "eric-cnom-document-database-mg.name" . }}
          image: {{ template "eric-cnom-document-database-mg.registryUrl" . }}{{ template "eric-cnom-document-database-mg.repoPath" . }}{{ index .Values "images" "mongodb" "name" }}:{{ index .Values "images" "mongodb" "tag" }}
          imagePullPolicy: {{ include "eric-cnom-document-database-mg.imagePullPolicy" . }}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - all
          command: ["/scripts/run-replicas.sh"]
          ports:
          - containerPort: {{ .Values.service.port }}
            name: mongodb
          env:
          - name: TZ
            value: {{ $global.timezone }}
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: {{ .Values.mongodbSystemLogVerbosity | quote }}
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: {{ ternary "yes" "no" .Values.mongodbDisableSystemLog | quote }}
          - name: MONGODB_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MONGODB_PRIMARY_HOST
            value: "{{ template "eric-cnom-document-database-mg.name" . }}-0.{{ template "eric-cnom-document-database-mg.name" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
          - name: MONGODB_REPLICA_SET_NAME
            value: "rs0"
          {{- if .Values.replicaSet.useHostnames }}
          - name: MONGODB_ADVERTISED_HOSTNAME
            value: "$(MONGODB_POD_NAME).{{ template "eric-cnom-document-database-mg.name" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
          {{- end }}
          {{- if .Values.usePassword }}
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{- else }}{{ template "eric-cnom-document-database-mg.name" . }}{{- end }}
                key: mongodb-root-password
          - name: MONGODB_REPLICA_SET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{- else }}{{ template "eric-cnom-document-database-mg.name" . }}{{- end }}
                key: mongodb-replica-set-key
          {{- if .Values.mongodbUsername }}
          - name: MONGODB_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{- else }}{{ template "eric-cnom-document-database-mg.name" . }}{{- end }}
                key: mongodb-user
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{- else }}{{ template "eric-cnom-document-database-mg.name" . }}{{- end }}
                key: mongodb-password
          - name: MONGODB_DATABASE
            value: "admin"
          {{- end }}
          {{- end }}
          - name: MONGODB_LOGGING_OUTPUT
            value: {{ .Values.logging.output | join " " | quote }}
          - name: MONGODB_LOG_NEW_PATH
            value: "/logs"
          - name: MONGODB_TMP_DIR
            value: "/tmp"
          - name: MONGODB_ENABLE_IPV6
            value: {{ ternary "yes" "no" .Values.mongodbEnableIPv6 | quote }}
          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
            value: {{ ternary "yes" "no" .Values.mongodbDirectoryPerDB | quote }}
          {{- if .Values.mongodbExtraFlags }}
          - name: MONGODB_EXTRA_FLAGS
            value: {{ .Values.mongodbExtraFlags | join " " | quote }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - pgrep
                - mongod
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
            - name: datadir
              mountPath: {{ .Values.persistence.mountPath }}
              subPath: {{ .Values.persistence.subPath }}
            {{- if and (not .Values.logging.logshipper.enabled) (has "file" .Values.logging.output) }}
            - name: mongodb-log-path
              mountPath: /logs
            {{- end }}
            - name: mongodb-tmp-path
              mountPath: /tmp
            - name: scripts
              mountPath: /scripts
            {{- if .Values.configmap }}
            - name: config
              mountPath: /opt/ericsson/mongodb/conf/mongodb.conf
              subPath: mongodb.conf
            {{- end }}
            {{- if  or (.Files.Glob "files/docker-entrypoint-initdb.d/*[sh|js|json]") (.Values.initConfigMap) }}
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            {{- end }}
            {{- if .Values.logging.logshipper.enabled }}
            {{- include "eric-cnom-document-database-mg.logshipper-storage-path" . | indent 12 }}
            {{- end }}
          resources: {{- toYaml .Values.resources.mongodb | nindent 12 }}
        {{- if .Values.logging.logshipper.enabled }}
        {{- include "eric-cnom-document-database-mg.logshipper-container" . | indent 8 }}
        {{- end }}
      volumes:
        - name: scripts
          configMap:
            name: {{ template "eric-cnom-document-database-mg.name" . }}-replicaset-scripts
            items:
              - key: run-replicas
                path: run-replicas.sh
            defaultMode: 0755
        {{- if .Values.configmap }}
        - name: config
          configMap:
            name: {{ template "eric-cnom-document-database-mg.name" . }}
        {{- end }}
        {{- if (.Files.Glob "files/docker-entrypoint-initdb.d/*[sh|js|json]") }}
        - name: custom-init-scripts
          configMap:
            name: {{ template "eric-cnom-document-database-mg.name" . }}-init-scripts
        {{- end }}
        {{- if (.Values.initConfigMap) }}
        - name: custom-init-scripts
          configMap:
            name: {{ .Values.initConfigMap.name }}
        {{- end }}
        {{- if .Values.logging.logshipper.enabled }}
        {{- include "eric-cnom-document-database-mg.logshipper-volume" . | indent 8 }}
        {{- end }}
        {{- if and (not .Values.logging.logshipper.enabled) (has "file" .Values.logging.output) }}
        - name: mongodb-log-path
          emptyDir: {}
        {{- end }}
        - name: mongodb-tmp-path
          emptyDir: {}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- range $key, $value := .Values.persistence.annotations }}
          {{ $key }}: "{{ $value }}"
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "eric-cnom-document-database-mg.storageClass" . }}
  {{- else }}
        - name: datadir
          emptyDir: {}
  {{- end }}
{{- end }}

# This is where you set any configuration that you need.
# Before this is merged, all other SG's should have been disabled.
# yaml manipulation is all done with yq: https://mikefarah.gitbook.io/yq/
global:
  security:
    tls:
      enabled: false
  registry:
    url:
    pullSecret:


images:
  eric-enm-int-log-transformer:
    name: eric-enm-sles-base
    tag: latest
  waitInitContainer:
    enabled: true
    name: eric-enm-init-container
    tag: latest
    command: "[ '/bin/sh', '-c', 'bash /var/tmp/check_service.sh -s elasticsearch']"

imageCredentials:
  repoPath: proj-enm
  pullPolicy: Always
  registry:
    url:
    pullSecret:

eric-log-transformer:
  enabled: true
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 # Kubernetes default value
      maxSurge: 0 # Kubernetes default value
  affinity:
    podAntiAffinity: "hard"
  replicaCount: 2
  persistentVolumeClaim:
    storageClassName: network-file
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9114"
  searchengine:
    host: "elasticsearch"
    port: 9200
  probes:
    logtransformer:
      livenessProbe:
        initialDelaySeconds: 600
        timeoutSeconds: 30
        periodSeconds: 30
        successThreshold: 1
        failureThreshold: 3
      readinessProbe:
        initialDelaySeconds: 80
        timeoutSeconds: 30
        periodSeconds: 30
        successThreshold: 1
        failureThreshold: 2
    metrics:
      livenessProbe:
        initialDelaySeconds: 600
        timeoutSeconds: 15
        periodSeconds: 30
        successThreshold: 1
        failureThreshold: 3
      readinessProbe:
        initialDelaySeconds: 10
        timeoutSeconds: 15
        periodSeconds: 30
        successThreshold: 1
        failureThreshold: 3
  config:
     filter: |
       ruby {
         code => "
             def get_code(type, **args)
               facilities_hash={
                 0 =>  ['kernel', 'kern'],
                 1 =>  ['user-level', 'user-level messages', 'user'],
                 2 =>  ['mail'],
                 3 =>  ['daemon'],
                 4 =>  ['auth', 'authpriv', 'security/authorization', 'security/authorization messages'],
                 5 =>  ['syslogd', 'syslog'],
                 6 =>  ['lpr', 'line printer'],
                 7 =>  ['news', 'network news'],
                 8 =>  ['uucp'],
                 9 =>  ['cron', 'clock'],
                 10 => ['security', 'security/authorization'],
                 11 => ['ftp'],
                 12 => ['ntp'],
                 13 => ['logaudit', 'log audit', 'audit'],
                 14 => ['logalert', 'log alert'],
                 15 => ['clock'],
                 16 => ['local0', 'local use 0'],
                 17 => ['local1', 'local use 1'],
                 18 => ['local2', 'local use 2'],
                 19 => ['local3', 'local use 3'],
                 20 => ['local4', 'local use 4'],
                 21 => ['local5', 'local use 5'],
                 22 => ['local6', 'local use 6'],
                 23 => ['local7', 'local use 7'],
               }
               severities_hash = {
                 0 => ['emergency', 'emerg'], 1 => ['alert'], 2 => ['critical', 'crit'], 3 => ['error', 'err'], 4 => ['warning'],
                 5 => ['notice'], 6 => ['info', 'informational'], 7 => ['debug']
               }
               if type == 'pri'
                 facility_index = facilities_hash.select { |k,v| v.include? args[:facility] }.keys.first
                 severity_index = severities_hash.select { |k,v| v.include? args[:severity] }.keys.first
                 if facilities_hash.nil? then facilities_hash= 24 end
                 if severity_index.nil? then facilities_hash= 8 end
                 return (facility_index*8)+severity_index
               elsif type == 'severity_code'
                 code = severities_hash.select { |k,v| v.include? args[:severity] }.keys.first
                 return code.nil? ? 8 : code
               elsif type == 'facility_code'
                 code= facilities_hash.select { |k,v| v.include? args[:facility] }.keys.first
                 return code.nil? ? 24: code
               end
               return 0
             end

             def nested_hash_value(obj,key_path, default_value,  parent_keys=[])
               key = key_path.last
               if obj.respond_to?(:key?) && obj.key?(key) &&  (parent_keys + [key]).join(' ').end_with?(key_path.join(' '))
                 return obj[key]
               elsif obj.respond_to?(:key?)
                 r = nil
                 obj.each_pair do |k, v|
                   r=nested_hash_value(v,key_path,default_value, parent_keys + [k])
                   if not r.nil? and not r == default_value then
                     return r
                   end
                 end
               end
               return default_value
             end

             def is_adp(event_obj)
               if event_obj.get('originator') and event_obj.get('originator') == 'enm-rsyslog'
                  return false
               elsif event_obj.get('type') and event_obj.get('type') == 'filebeat'
                 return true
               else
                 adp_rsyslog=['eric-ctrl-bro', 'log-transformer-test-serv']
                 adp_rsyslog.each do |serv_host|
                   if event_obj.get('host') and event_obj.get('host').start_with? serv_host
                     return true
                   end
                 end
               end
               return false
             end

             def mgsub(str_value, key_value_pairs=[].freeze)
                  regexp_fragments = key_value_pairs.collect { |k,v| k }
                  str_value.gsub(
                    Regexp.union(*regexp_fragments)) do |match|
                    key_value_pairs.detect{|k,v| k =~ match}[1]
                  end
             end

             ## starting our transformation logic
             hash_event = event.to_hash
             begin
               ## below info log should remain commented in production as i degread the log-transformer throughput
               ## just enable it in testing if you want to see the event object contents before entering our transformation logic
               ## logger.info('Log Event => ', hash_event )
               severity= nested_hash_value(hash_event,['severity'], 'stdout/stderr')
               severity_code = severity == 'stdout/stderr' ? 8 : get_code('severity_code', {severity:severity})
               facility= nested_hash_value(hash_event,['facility'], 'adp')
               facility_code = facility == 'adp' ? 24 : get_code('facility_code', facility:facility)
               message = nested_hash_value(hash_event,['message'],'')
               service_id= nested_hash_value(hash_event, ['service_id'], 'adp')
               program = nested_hash_value(hash_event,['program'], service_id)
               tag = nested_hash_value(hash_event,['tag'], service_id)
               host = nil
               [['host'],['kubernetes','pod','name'],['kubernetes','node','name']].find do |key_path|
                 host = nested_hash_value(hash_event, key_path, nil)
               end
               pri = nested_hash_value(hash_event,['pri'],nil)
               if not pri
                 pri = facility_code*8 + severity_code
               end

               event.set('severity', severity)
               event.set('severity_code', severity_code)
               event.set('message', message)
               event.set('program', program)
               event.set('tag', tag)
               event.set('facility', facility)
               event.set('facility_code', facility_code)
               if event.get('timestamp').nil?
                 event.set('timestamp', event.get('@timestamp').time.strftime('%Y-%m-%d' + 'T' + '%H:%M:%S.%L%:z'))
               elsif not(event.get('timestamp').is_a? String)
                 event.set('timestamp', event.get('timestamp').time.strftime('%Y-%m-%d' + 'T' + '%H:%M:%S.%L%:z'))
               end
               event.set('timestamp_notz', mgsub(event.get('timestamp'),[[/\+\d{2}:\d{2}|-\d{2}:\d{2}/, ''], [/\+\d{4}|-\d{4}/, '']]))
               event.set('host', host)
               event.set('pri', pri)
               ## enm-rsyslog
               if not is_adp(event)
                 if tag != nil && (tag.to_str.include? 'OPENIDM')
                   event.set('logplane', 'enm_openidm_logs_index')
                 elsif 13 == facility_code
                   event.set('logplane', 'enm_audit_logs_index')
                 elsif [4 , 10].include? facility_code
                   event.set('logplane', 'enm_security_logs_index')
                 elsif severity == 'debug'
                   event.set('logplane', 'enm_debug_logs_index')
                 elsif 6 == severity_code
                   if host.to_str.include? 'ebsflow'
                     event.set('logplane', 'enm_logs_ebsflow_info_index')
                   elsif 21 == facility_code
                     event.set('logplane','enm_info_syslog_logs_index')
                   else
                     event.set('logplane', 'enm_info_logs_index')
                   end
                 else
                   event.set('logplane', 'enm_warn_and_above_logs_index')
                 end
               else
                 ## adp events
                 event.set('logplane', 'enm_adp_logs_index')
               end
               %w[kubernetes json tags filename ecs metadata originator].each do |k|
                 event.remove(k)
               end
             rescue Exception => e
               ## this error log will log failed event and the error message , that will be available in logtransformer logs in logviewer
               ## if the error arise in the pipeline before reaching our code block it will be logged as error in default logstash formate
               logger.error('Filter Error : ',  {'error' => e, 'event' =>  hash_event} )
             end
         "
       }
       date {
          match => ["timestamp_notz", "yyyy-MM-dd HH:mm:ss.S", "yyyy-MM-dd'T'HH:mm:ss.S", "yyyy-MM-dd'T'HH:mm:ss.S", "yyyy-MM-dd'T'HH:mm:ss.SSS", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS" ]
          timezone => "UTC"
          target => "@timestamp"
       }
       mutate {
          remove_field => [ "timestamp_notz" ]
       }
  adpJson:
    validation:
      enabled: false
    transformation:
      enabled: false

elasticsearch_template:
  enabled: true
  host: 'elasticsearch'
  port: '9200'
  componentTemplateName: 'enm_index_component_template'
  componentTemplateFile: 'enm_index_component_template.json'
  indexTemplateName: 'enm_index_template'
  indexTemplateFile: 'enm_index_template.json'
## eric-enmsg-opendj image version

# Local ENvironment (MINIKUBE) mode
localEnv:
  enabled: false

global:
  pullSecret:
  registry:
    url: armdocker.rnd.ericsson.se
  replicas-eric-enmsg-opendj: 2
  ingress:
    enmHost:
  persistentVolumeClaim:
    storageClass:
  env: "beta"
  timezone:
  security:
    tls:
      enabled: false
  rwx:
    storageClass: nfs
  enmProperties:
    COM_INF_LDAP_PORT:
    LDAP_ADMIN_CN:
    LDAP_ADMIN_PASSWORD:
    COM_INF_LDAP_ROOT_SUFFIX:
    COM_INF_LDAP_ADMIN_CN:
    COM_INF_LDAP_ADMIN_ACCESS:

productRevision: R27K
productionDate: 2022-06-21T12:24:33Z
revision: 1.26.9-1
labels: {}

images:
  eric-enmsg-opendj:
    name: eric-enmsg-opendj
    tag: 1.26.9-1
    postStartCommand: "[ '/bin/sh', '-c', '/tmp/reconConfig.sh' ]"
    # Check content of old script
    #preStopCommand: "[ '/bin/sh', '-c', '/usr/lib/ocf/pre_shutdown/shutdown_opendj.sh' ]"
    preStopCommand: "[ 'su', '-', 'opendj', '-c', '/ericsson/opendj/opendj/bin/stop-ds --quiet' ]"
  waitInitContainer:
    enabled: false
    name: eric-enm-init-container
    tag: 1.27.9-1
    command: "[ '/bin/sh', '-c', 'bash /var/tmp/check_service.sh -s WAITSERVICE' ]"
  enmInitContainer:
    enabled: true
    name: eric-enmsg-opendj-init
    tag: 1.26.9-1
  brAgent:
    name: eric-enm-opendj-bragent
    tag: 1.26.9-1

imageCredentials:
  repoPath: proj-enm
  pullPolicy: Always
  pullSecret:
  registry:
    url:
  logshipper:
    registry:
      url:
      imagePullPolicy:
    repoPath: "proj-adp-log-released"

## Allows the specification of additional environment variables
extraEnv:

## Configure the service
service:
  name2: ldap-remote
  name1: ldap-local
  name: opendj
  annotations: {}
  labels: {}

config:
# K8s pod management policies (default for SS is OrderedReady)
  podManagementPolicy: Parallel
  port:
    prometheusMonitoring: 8001

ingress:
  enmHost:

# Service Ports to Expose, read from appconfig/servicePorts.txt
servicePorts:
  enabled: true
  admin: 4444

# Add container ports to open, read in from appconfig/ports.txt(disabled by default as should be included in docker file)
extraPorts:
  enabled: true

# Configure resource requests and limits
resources:
  requests:
    enabled: true
    cpu: 2000m
    memory: 4Gi
  limits:
    enabled: true
    cpu: 4000m
    memory: 4Gi
  brAgent:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "300m"
      memory: "256Mi"
  logshipper:
    limits:
      memory: "100Mi"
      cpu: "100m"
    requests:
      memory: "50Mi"
      cpu: "50m"


# Add initContainer if required
extraInitContainers:

# Additional containers to be added to the pod(s).
sidecarContainers:
  enabled: false

monitoring:
  enabled: false

# Add in volumes(rwx etc), read from appconfig/volumes.txt
extraVolumes:
  enabled: true

# Add in volumeMounts(rwx etc), read from appconfig/volumeMounts.txt
extraVolumeMounts:
  enabled: true

# Custom config map, read from appconfig/configMaps.yaml
configMaps:
  enabled: false
  name: config-eric-enmsg-opendj
  mountPath: MOUNTPOINT

# Persist data to a persistent volume
# database data Persistent Volume Storage Class
persistentVolumeClaim:
  enabled: true
  storageClassName:
  accessMode: ReadWriteOnce
  size: 5Gi
  mountPath: /ericsson/opendj/opendj/db
  annotations: {}
  configSize: 100Mi
  changeLogSize: 3Gi
  logSize: 3Gi

# LivenessProbe Health Check configuration.
startupProbe:
  enabled: true
  startupCommand: "[ '/bin/sh', '-c', '/tmp/start-up.sh' ]"
  initialDelaySeconds: 10
  timeoutSeconds: 30
  periodSeconds: 30
  failureThreshold: 7
livenessProbe:
  enabled: true
  livenessCommand: "[ '/bin/sh', '-c', '/tmp/liveness.sh' ]"
  initialDelaySeconds: 30
  timeoutSeconds: 30
  periodSeconds: 60
  failureThreshold: 2

readinessProbe:
  enabled: true
  readinessCommand: "[ '/bin/sh', '-c', '/tmp/readiness.sh' ]"
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 15
  failureThreshold: 2

probes:
  logshipper:
    livenessProbe:
      initialDelaySeconds: 1
      timeoutSeconds: 10
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3

# Extra Annotations to be added to pod
podAnnotations: {}

## Tolerations for pod assignment
tolerations: []

## Affinity for pod assignment
affinity: requiredDuringSchedulingIgnoredDuringExecution

# Constrain which nodes your pod is eligible to be scheduled on
nodeAffinity: {}

priorityClassName: ""

## Node selector
nodeSelector: {}

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    # Mandatory: specifies the maximum number of Pods that can be unavailable during the update process and shall be mapped to
    maxUnavailable: 1
    # Optional specifies the maximum number of Pods that can be created over the desired number of Pod and shall be mapped to
    maxSurge: 0
    partition: 0

## Pod Disruption Budget is an indicator of the number of disruptions that can be tolerated at a given time.
podDisruptionBudget:
  maxUnavailable: 1

log:
  # Supported values "stdout" / "file"
  # 'stdout' outputs agent logs to only stdout
  # 'file' outputs agent logs to both stdout and file
  output: "file"
  logshipper:
    level: "info"

logshipper:
  storagePath: "/logs"
  storageAllocation: "100Mi"
  harvester:
    logData:
      - subPaths:
          - "opendj-bragent.log"

brAgent:
  enabled: true
  compression:
    zstdCLevel: -10
  restorePropertyPath: ""
  restore:
    configMap:
      name: backup-restore-configmap
      restoreStateKey: RESTORE_STATE
    state: ""
    scope: ""
    backupName: ""
  broServiceName: eric-ctrl-bro
  backupTypeList:
  replicaStartTimeoutMins: 60
  serviceAccount:
    # Controls the creation of ServiceAccount, Role and RoleBinding to be used in restore operation.
    # When they are externally defined, set it to false and provide the ServiceAccount name.
    create: true
    # Name of the ServiceAccount to be used. Leave empty to use <Chart.name>-bragent .
    # If the ServiceAccount, Role and RoleBinding are externally defined, the Role MUST have
    # at least get, list, watch authorization for statefulsets, deployments and pods resources
    name:

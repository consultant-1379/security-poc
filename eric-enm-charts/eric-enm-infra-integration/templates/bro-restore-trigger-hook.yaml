{{- if .Values.global.restore.backupName -}}
# Job hook execution weight
{{- $pre_install_hook_weight := index .Values "images" "eric-enm-chart-hooks" "hook-pre-weight" -}}
# hook execution setup weight i.e. create the serviceaccount before the resources that use it.
{{- $pre_install_hook_weight_init := sub $pre_install_hook_weight 1 }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "infra-integration.broServiceAccountName" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-weight": {{ $pre_install_hook_weight_init | quote }}
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install"
  labels:
    app.kubernetes.io/name: {{ template "infra-integration.name" . }}
    helm.sh/chart: {{ template "infra-integration.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "infra-integration.broServiceAccountName" . }}-rolebinding
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-weight": {{ $pre_install_hook_weight_init | quote }}
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install"
  labels:
    app.kubernetes.io/name: {{ template "infra-integration.name" . }}
    helm.sh/chart: {{ template "infra-integration.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
subjects:
  - kind: ServiceAccount
    name: {{ template "infra-integration.broServiceAccountName" . }}
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ template "infra-integration.broServiceAccountName" . }}-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ template "infra-integration.broServiceAccountName" . }}-role
  annotations:
    "helm.sh/hook-weight": {{ $pre_install_hook_weight_init | quote }}
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install"
  labels:
    app.kubernetes.io/name: {{ template "infra-integration.name" . }}
    helm.sh/chart: {{ template "infra-integration.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
rules:
  - apiGroups: [""]
    resources: ["configmaps", "pods"]
    verbs: ["get", "list", "patch", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create", "list", "delete"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "infra-integration.broRestoreTriggerJobName" . }}
  labels:
    app.kubernetes.io/name: {{ template "infra-integration.name" . }}
    helm.sh/chart: {{ template "infra-integration.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": {{ $pre_install_hook_weight | quote }}
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ template "infra-integration.broRestoreTriggerJobName" . }}
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: {{ template "infra-integration.chart" . }}
    spec:
      restartPolicy: Never
      {{- if include "infra-integration.pullSecrets" . }}
      imagePullSecrets:
        - name: {{ template "infra-integration.pullSecrets" . }}
      {{- end }}
      serviceAccountName: {{ template "infra-integration.broServiceAccountName" . }}
      containers:
        - name: executor
          image: {{ .Values.global.registry.url }}/{{ template "infra-integration.hookImageRepoPath" . }}/{{ index .Values "images" "eric-enm-chart-hooks" "name" }}:{{ index .Values "images" "eric-enm-chart-hooks" "tag" }}
          imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - exec_hook bro_restore_trigger.py -A {{ template "infra-integration.broServiceAccountName" . }} -S /externalStorageCredentials/ -j {{ template "infra-integration.broRestoreExecutorJobName" . }} -b {{ .Values.global.restore.backupName }} -s {{ .Values.global.restore.scope }} -c {{ .Values.global.restore.configMap.name }}
          env:
            - name: BRO_HOST
              value: {{ index .Values "images" "eric-enm-chart-hooks" "broServiceName" | default "eric-ctrl-bro" }}
            - name: BRO_PORT
              value: {{ index .Values "images" "eric-enm-chart-hooks" "broServicePort" | default "7001" | quote }}
            - name: PULL_SECRET
              value: {{ template "infra-integration.pullSecrets" . }}
{{ if .Values.global.restore.externalStorageCredentials }}
  # If there's no secrets then it's assumed the backup has been imported into BRO already.
  # The externalStorageCredentials should be stored in a Secrets object called
  # external-storage-credentials with the SFTP users password
          volumeMounts:
            - mountPath: "/externalStorageCredentials/"
              name: "{{- .Values.global.restore.externalStorageCredentials -}}"
              readOnly: true
      volumes:
        - name: "{{- .Values.global.restore.externalStorageCredentials -}}"
          secret:
            secretName: "{{- .Values.global.restore.externalStorageCredentials -}}"
{{- end}}
{{- end}}

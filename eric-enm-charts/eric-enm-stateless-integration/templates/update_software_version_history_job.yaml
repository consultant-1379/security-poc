apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.updateSoftwareVersionHistoryJob.name }}-job
  labels:
    app: {{ template "stateless-integration.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    "helm.sh/hook": pre-install,post-install,pre-upgrade,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      name: {{ .Values.updateSoftwareVersionHistoryJob.name }}-job
      labels:
        app: {{ template "stateless-integration.name" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      restartPolicy: {{ .Values.updateSoftwareVersionHistoryJob.restartPolicy }}
      {{- if or .Values.nodeSelector .Values.global.nodeSelector }}
      nodeSelector:
      {{- if .Values.nodeSelector }}
      {{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.global.nodeSelector }}
      {{ toYaml .Values.global.nodeSelector | indent 8 }}
      {{- end }}
      {{- end }}
      {{- if or .Values.tolerations .Values.global.tolerations }}
      tolerations:
      {{- if .Values.tolerations }}
      {{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.global.tolerations }}
      {{ toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}
      {{- end }}
      {{- if include "stateless-integration.pullSecrets" . }}
      imagePullSecrets:
        - name: {{ template "stateless-integration.pullSecrets" . }}
      {{- end }}
      containers:
        - name: {{ .Values.updateSoftwareVersionHistoryJob.name }}
          image: "{{ .Values.global.registry.url }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "waitInitContainer" "name" }}:{{ index .Values "images" "waitInitContainer" "tag" }}"
          imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
          env:
            - name: TZ
              value: {{ .Values.global.timezone }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command: [ '/bin/bash', '-c']
          args:
            - |
              HISTORY_FILE=/ericsson/tor/data/.enm-history
              RESTORE_FLAG_FILE=/ericsson/tor/data/.enm-history-rf
              VERSION_FILE=/.enm-version
              CURRENT_VERSION=$(cat ${VERSION_FILE})

              updateHistoryFile(){
                echo "$(date '+%Y-%m-%dT%H:%M:%S') - ${1} - ${CURRENT_VERSION}" >> ${HISTORY_FILE}
              }
              removeRestoreFlagFile(){
                rm -f ${RESTORE_FLAG_FILE}
              }
              updateTimestampOfLastRecord(){
                sed -i "$ s/[^ ]* /$(date '+%Y-%m-%dT%H:%M:%S') /" ${HISTORY_FILE}
              }

              if [ ! -f ${HISTORY_FILE} ]; then
                updateHistoryFile "II"
              else
                LAST_RECORD=$(sed '$!d' ${HISTORY_FILE})
                RESTORE_FLAG=$(grep -s 'RE\|RB' ${RESTORE_FLAG_FILE})
                if [[ -n ${RESTORE_FLAG} ]]; then
                  updateHistoryFile "${RESTORE_FLAG}"
                  removeRestoreFlagFile
                elif [[ "${LAST_RECORD}" == *"${CURRENT_VERSION}"* ]]; then
                  updateTimestampOfLastRecord
                else
                  updateHistoryFile "UG"
                fi
              fi
          volumeMounts:
            - name: data
              mountPath: /ericsson/tor/data
            - name: enm-version-configmap
              mountPath: /.enm-version
              subPath: .enm-version
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: eric-enm-rwxpvc-data
        - name: enm-version-configmap
          configMap:
            name: {{ .Values.updateSoftwareVersionHistoryJob.softwareVersionConfigmap }}
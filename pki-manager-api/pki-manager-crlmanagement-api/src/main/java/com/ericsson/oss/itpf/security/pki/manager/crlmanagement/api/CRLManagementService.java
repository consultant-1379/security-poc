/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2015
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.oss.itpf.security.pki.manager.crlmanagement.api;

import java.util.List;
import java.util.Map;

import javax.ejb.Remote;

import com.ericsson.oss.itpf.sdk.core.annotation.EService;
import com.ericsson.oss.itpf.security.pki.common.model.certificate.CACertificateIdentifier;
import com.ericsson.oss.itpf.security.pki.common.model.certificate.CertificateStatus;
import com.ericsson.oss.itpf.security.pki.common.model.crl.CRLInfo;
import com.ericsson.oss.itpf.security.pki.common.model.crl.extension.CRLNumber;
import com.ericsson.oss.itpf.security.pki.manager.exception.crl.*;
import com.ericsson.oss.itpf.security.pki.manager.exception.entity.CAEntityNotInternalException;
import com.ericsson.oss.itpf.security.pki.manager.exception.entity.InvalidEntityAttributeException;
import com.ericsson.oss.itpf.security.pki.manager.exception.entity.caentity.CANotFoundException;
import com.ericsson.oss.itpf.security.pki.manager.exception.entity.caentity.InvalidCAException;
import com.ericsson.oss.itpf.security.pki.manager.exception.security.certificate.*;
import com.ericsson.oss.itpf.security.pki.manager.model.crl.CRLGenerationStatus;
import com.ericsson.oss.itpf.security.pki.manager.model.crl.cdps.CRLPublishUnpublishStatus;

/**
 * This is an interface for CRLManagementService. It provides below CRL management operations.
 * <ul>
 * <li>Generate CRL for a given CA and Certificate serial number</li>
 * <li>Generate CRL for a list of given CA Names and CertificateStatuses</li>
 * <li>Generate CRL for a given CAName</li>
 * <li>Fetch latest CRL for given CA and Certificate serial number</li>
 * <li>Fetch all the existing CRLs for given CA and Certificate serial number</li>
 * <li>Fetch all the existing CRLs for given CA and CertificateStatus</li>
 * <li>Fetch CRL of CA's Latest Certificate and its issuer Certificates CRLs up to ROOT CA based on Certificate Status</li>
 * <li>Fetch CRL with the given CRLNumber and which is issued by the given CA</li>
 * <li>Publish CRLs to CDPS Service for a list of given CANames</li>
 * <li>UnPublish CRLs from CDPS Service for a list of given CANames</li>
 * </ul>
 * 
 * @author xbensar
 */

@EService
@Remote
public interface CRLManagementService {

    /**
     * generateCRL method will generate a CRL for a given CA and Certificate serial number.
     * 
     * @param caCertIdentifier
     *            is the CA certificate information holder containing CA name and Certificate serial number.
     * @throws CANotFoundException
     *             Thrown when given CAEntity doesn't exists.
     * @throws CRLGenerationException
     *             thrown when CRL generation validations failed during the generation of CRL.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during the generation of CRL.
     * @throws ExpiredCertificateException
     *             thrown when the CRL generation request is raised for an expired certificate.
     * @throws InvalidCRLGenerationInfoException
     *             Thrown for invalid CRLGenerationInfo or invalid fields in CRLGenerationInfo.
     * @throws RevokedCertificateException
     *             thrown when the CRL generation request is raised for a revoked certificate.
     * 
     */
    void generateCRL(final CACertificateIdentifier caCertIdentifier) throws CANotFoundException, CertificateNotFoundException, CRLGenerationException, CRLServiceException,
            ExpiredCertificateException, InvalidCRLGenerationInfoException, RevokedCertificateException;

    /**
     * generateCRL method will generate CRLs by the certificates which are identified by the given CA Names and Certificate Statuses. CRLs will only be generated by certificates with "ACTIVE" and
     * "INACTIVE" statuses. This method will return a map which contains {@link CACertificateIdentifier} objects as key and {@link CRLGenerationStatus} as value. If the provided certificateStatus is
     * "ACTIVE" then map will contain {@link CACertificateIdentifier} object related to active certificate and its {@link CRLGenerationStatus} as value, If it is "INACTIVE" then map contains
     * {@link CACertificateIdentifier} objects related to inactive certificates and their {@link CRLGenerationStatus} value. If certificateStatus contains both "ACTIVE" and "INACTIVE", then map
     * contains {@link CACertificateIdentifier} objects related to active and inactive certificates and their corresponding {@link CRLGenerationStatus} values.
     * 
     * @param caEntityNameList
     *            is the list of CAEntity names.
     * @param certificateStatus
     *            The {@link CertificateStatus} values by which certificates are identified to generate CRL.
     * @return Map object which contains {@link CACertificateIdentifier} object as key and {@link CRLGenerationStatus} as value.
     * @throws InvalidCertificateStatusException
     *             thrown when "EXPIRED" or "REVOKED" certificate status is provided for generating CRL.
     * 
     */
    Map<CACertificateIdentifier, CRLGenerationStatus> generateCRL(final List<String> caEntityNameList, final CertificateStatus... certificateStatus) throws InvalidCertificateStatusException;

    /**
     * getCRLByCACertificate will fetch the latest CRL for a given CA Entity and its Certificate Serial Number.
     * 
     * @param caCertIdentifier
     *            is the CA certificate information holder containing CA name and Certificate Serial number
     * @return CRL object which contains the attributes like X509CRL, thisUpdate, nextUpdate,CRLNumber,CRLStatus.
     * @throws CAEntityNotInternalException
     *             thrown when given CA is external CA
     * @throws CANotFoundException
     *             thrown when given CA for which the CRL has to be fetched does not exists.
     * @throws CertificateNotFoundException
     *             thrown when no certificate exists with the given certificate serial number.
     * @throws CRLNotFoundException
     *             thrown when CRL for the requested CA does not exist.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during the fetching the CRL.
     * @throws ExpiredCertificateException
     *             thrown when the fetch CRL request is raised for an expired certificate.
     * @throws InvalidCRLGenerationInfoException
     *             thrown when the CRL has invalid extension.
     * @throws InvalidEntityAttributeException
     *             thrown when the entity has invalid attribute.
     * @throws RevokedCertificateException
     *             thrown when the fetch CRL request is raised for a revoked certificate.
     */
    CRLInfo getCRLByCACertificate(final CACertificateIdentifier caCertIdentifier) throws CAEntityNotInternalException, CANotFoundException, CertificateNotFoundException, CRLNotFoundException,
            CRLServiceException, ExpiredCertificateException, InvalidCRLGenerationInfoException, InvalidEntityAttributeException, RevokedCertificateException;

    /**
     * getAllCRLs is used to fetch all CRLs of the given CA Entity and its Certificate Serial Number
     * 
     * @param caCertIdentifier
     *            is the CA certificate information holder containing CA name and Certificate Serial number.
     * @return list of CRL objects( CRL object which contains the attributes like X509CRL, thisUpdate, nextUpdate,CRLNumber,CRLStatus)
     * @throws CAEntityNotInternalException
     *             thrown when given CA Entity exists but it's an external CA.
     * @throws CANotFoundException
     *             thrown when given CA for which the CRL has to be fetched does not exists.
     * @throws CertificateNotFoundException
     *             thrown when no certificate exists with the given certificate status.
     * @throws CRLGenerationException
     *             thrown when CRL generation validations failed during the generation of CRL.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during CRL fetching.
     * @throws InvalidCAException
     *             thrown when the given CA does not have active certificates.
     * @throws InvalidCRLGenerationInfoException
     *             thrown when the CRL Generation failed due to invalid attribute.
     * @throws InvalidEntityAttributeException
     *             thrown when mapping CAEntity model to API
     */
    List<CRLInfo> getAllCRLs(final CACertificateIdentifier caCertIdentifier) throws CAEntityNotInternalException, CANotFoundException, CertificateNotFoundException, CRLGenerationException,
            CRLNotFoundException, CRLServiceException, InvalidCAException, InvalidCRLGenerationInfoException, InvalidEntityAttributeException;

    /**
     * getAllCRLs is used to fetch all CRLs which are issued by the certificate with given status and this certificate belongs to the given CA Entity.
     * 
     * @param caEntityName
     *            is the name of CAEntity.
     * @param certificateStatus
     *            is used to identify the certificate to get all CRLs.
     * @return Map object which contains {@link CACertificateIdentifier} object as key and list of all {@link CRLInfo} objects as value. caCertificateIdentifier object gives the certificate
     *         information of the given CAName and this certificate information is related to the issuer certificate of CRL.
     * @throws CAEntityNotInternalException
     *             thrown when given CA Entity exists but it's an external CA.
     * @throws CANotFoundException
     *             thrown when given CA for which the CRL has to be fetched does not exists.
     * @throws CertificateNotFoundException
     *             thrown when no certificate exists with the given certificate status.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during CRL fetching.
     * @throws InvalidCAException
     *             thrown when the given CA does not have active certificates.
     * @throws InvalidEntityAttributeException
     *             Thrown when invalid entity attribute is provided as part of the request.
     */
    Map<CACertificateIdentifier, List<CRLInfo>> getAllCRLs(final String caEntityName, final CertificateStatus certificateStatus) throws CAEntityNotInternalException, CANotFoundException,
            CertificateNotFoundException, CRLServiceException, InvalidCAException, InvalidEntityAttributeException;

    /**
     * getCRL will return a map which contains {@link CACertificateIdentifier} as key and list of latest {@link CRLInfo} of the given CA as value. The {@link CACertificateIdentifier} will be based on
     * CertificateStatus provided. If the provided certificateStatus is "ACTIVE" then the map will contain {@link CACertificateIdentifier} related to active certificate and its list of latest
     * {@link CRLInfo} value, If it is "INACTIVE" then map contains {@link CACertificateIdentifier} related to inactive certificates and their corresponding list of latest {@link CRLInfo} values. If
     * "isChainRequired" is true, then latest CRLs for all the certificates in the certificate chain will be returned in the map, if it is false then latest {@link CRLInfo} of the certificate will be
     * returned.
     * 
     * @param caEntityName
     *            name of the entity for which the CRL has to be fetched
     * @param certificateStatus
     *            status of the certificate for which crl has to be fetched. Only the CRLs, which are generated by Active and Inactive CA Certificates are returned.
     * @param isChainRequired
     *            true, if all the CRLs up to the Root CA are need to be fetched. false, if only latest CRL of the given CA need to be fetched.
     * @return Map object containing CACertificateIdentifier as Key and list of latest CRLInfo objects {@link CRLInfo} as value. caCertificateIdentifier object gives the certificate information of the
     *         given CAName and this certificate information is related to the issuer certificate of CRL. If chain is true then this CACertificateIdentifier represents the certificate which is the
     *         certificate of the given CA Name as well as the issuer certificate of the first CRL in provided chain of CRLs.
     * @throws CANotFoundException
     *             thrown when given CA for which the CRL has to be fetched does not exists.
     * @throws CAEntityNotInternalException
     *             thrown when the given CA Entity is External CA.
     * @throws CertificateNotFoundException
     *             thrown when no certificate exists with the given status.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during the fetching the CRL.
     * @throws InvalidCertificateStatusException
     *             thrown when the get CRL request is raised on expired and revoked certificate status.
     * @throws InvalidEntityAttributeException
     *             thrown when the given entity has invalid attribute.
     */
    Map<CACertificateIdentifier, List<CRLInfo>> getCRL(final String caEntityName, final CertificateStatus certificateStatus, final boolean isChainRequired) throws CANotFoundException,
            CAEntityNotInternalException, CertificateNotFoundException, CRLServiceException, InvalidCertificateStatusException, InvalidEntityAttributeException;

    /**
     * getCRL will get the CRL with the given CRLNumber and which is issued by the given CA
     * 
     * @param caEntityName
     *            is the name of CAEntity.
     * @param crlNumber
     *            is the CRLNumber which is assigned to the CRL to identify CRL
     * @return CRLInfo object which contains the attributes like thisUpdate, nextUpdate,CRLNumber,CRLStatus.
     * @throws CAEntityNotInternalException
     *             thrown when given CA Entity exists but it's an external CA.
     * @throws CANotFoundException
     *             thrown when given CA for which the CRL has to be fetched does not exists.
     * @throws CRLNotFoundException
     *             thrown when CRL for the requested CA does not exist.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during the fetching the CRL.
     * @throws InvalidCAException
     *             Thrown when the CA is not active.
     * @throws InvalidEntityAttributeException
     *             Thrown when invalid entity attribute is provided as part of the request.
     */
    CRLInfo getCRL(final String caEntityName, final CRLNumber cRLNumber) throws CAEntityNotInternalException, CANotFoundException, CRLNotFoundException, CRLServiceException, InvalidCAException,
            InvalidEntityAttributeException;

    /**
     * This method Publish Latest CRLs to the CDPS using list of CANames and update CA's PublishToCDPS to True.
     * 
     * @param caNames
     *            contains the list of CANames
     * @return map object contains the key as CAName ,value as corresponding CRL Publish UnPublish Status
     * 
     * @throws CANotFoundException
     *             Thrown when given CAEntity doesn't exists.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during fetching the CRL.
     */
    Map<String, CRLPublishUnpublishStatus> publishCRLToCDPS(final List<String> caNames) throws CANotFoundException, CRLServiceException;

    /**
     * This method unPublish CRLs of the given CAs and update their PublishToCDPS value to false.
     *
     * @param caNames
     *            contains the list of CANames
     * @return map object contains the key as CAName ,value as corresponding CRL Publish UnPublish Status
     * 
     * @throws CANotFoundException
     *             Thrown when given CAEntity doesn't exists.
     * @throws CRLServiceException
     *             thrown when there is any internal error like database error during fetching the CRL.
     */
    Map<String, CRLPublishUnpublishStatus> unpublishCRLFromCDPS(final List<String> caNames) throws CANotFoundException, CRLServiceException;

}
